# -*- coding: utf-8 -*-
"""Play Store App Review Analysis  EDA Project(Pawan) .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1paOKyJDK4JpTaCWMnKwOWXpr91pL302M

# **Project Name**    -  **Play Store App Review Analysis**

##### **Project Type**    - EDA
##### **Contribution**    - Team
##### **Team Member 1 -**  Pawan Gajbhiye
##### **Team Member 2 -**  Rohan Parage
##### **Team Member 3 -**  Sameer Marakala
##### **Team Member 4 -**  Aaftab Patel

# **Project Summary -**

Our project revolves around demystifying the Play Store data puzzle to empower app developers in the Android realm. The main goal is to sift through app details and user reviews,italicized text distilling insights that can guide developers towards making smarter decisions for better user engagement.


**Understanding the Playground:**

To kick off, we gather a trove of data from the Play Store—details like app categories, ratings, and sizes. We also grab user reviews, aiming for a comprehensive understanding of what factors contribute to app success.

Getting Acquainted with the Data:
Taking a closer look at the data, we ensure it's all in order and fill in any blanks. Quick snapshots of ratings and sizes give us a bird's eye view of trends and patterns.

**Cracking the Category Code:**

Next, we dive into how apps perform across different categories. This helps identify the hotspots—categories that are currently rocking the charts. Developers can then tailor their efforts to align with these trends.

**User Vibes Matter:**

We tap into customer reviews to uncover the feelings users have about apps. This sentiment analysis helps developers in refining their creations, prioritizing features that users love and fixing areas that might be irking them.

**Connecting the Data Dots:**

We play matchmaker with different data points—ratings, size, and category—seeking out connections that reveal what makes users tick. This detective work allows developers to focus on aspects that strongly influence higher app engagement.

**Size Check:**

Ever wondered if app size affects how users rate an app? We investigate that too, providing insights into the optimal app size for maximum user satisfaction.

**What We Serve on the Plate:**

At the project's end, we serve up insights and recommendations on a platter for developers. This includes understanding user preferences, strategies to shine in specific categories, and actionable feedback from users for app improvement.

**What We Expect:**

This project isn’t just about numbers; it's about giving developers the keys to app success. We expect to pinpoint factors crucial for app triumph, provide a peek into user preferences, and hand over practical tips for developers to level up their apps.

In essence, our project is about simplifying the complex world of Play Store data, offering a roadmap for developers to navigate towards app success. It's not just about numbers; it's about understanding what users want and guiding developers on how to deliver just that.

# **GitHub Link -**

https://github.com/ArmanRaut/Play-Store-App-Review-Analysis-EDA

# **Problem Statement**

**In the Play Store, developers struggle to understand what makes apps successful—like which categories work best, what users really like, and how factors such as ratings and size matter. This project aims to untangle these questions using data analysis, providing clear guidance for developers to make better apps and thrive in the competitive Android market.**

#### **Define Your Business Objective?**

**Empower app developers to create more successful apps for the Play Store by understanding user preferences, identifying top-performing categories, and optimizing app sizes. Through clear data insights, the goal is to guide developers in making informed decisions that enhance user satisfaction and overall app success in the competitive Android market.**

# **General Guidelines** : -

1.   Well-structured, formatted, and commented code is required.
2.   Exception Handling, Production Grade Code & Deployment Ready Code will be a plus. Those students will be awarded some additional credits.
     
     The additional credits will have advantages over other students during Star Student selection.
       
             [ Note: - Deployment Ready Code is defined as, the whole .ipynb notebook should be executable in one go
                       without a single error logged. ]

3.   Each and every logic should have proper comments.
4. You may add as many number of charts you want. Make Sure for each and every chart the following format should be answered.
        

```
# Chart visualization code
```
            

*   Why did you pick the specific chart?
*   What is/are the insight(s) found from the chart?
* Will the gained insights help creating a positive business impact?
Are there any insights that lead to negative growth? Justify with specific reason.

5. You have to create at least 20 logical & meaningful charts having important insights.


[ Hints : - Do the Vizualization in  a structured way while following "UBM" Rule.

U - Univariate Analysis,

B - Bivariate Analysis (Numerical - Categorical, Numerical - Numerical, Categorical - Categorical)

M - Multivariate Analysis
 ]

# ***Let's Begin !***

## ***1. Know Your Data***

### Import Libraries
"""

# Import Libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.ticker import FuncFormatter
import seaborn as sns
import os
from google.colab import files

"""### Dataset Loading"""

# Load Dataset
from google.colab import drive
drive.mount("/content/gdrive")

df= pd.read_csv("/content/gdrive/MyDrive/Play Store Data.csv")
df

"""### Dataset First View"""

# Dataset First Look
df

"""### Dataset Rows & Columns count"""

# Dataset Rows & Columns count
df.shape

"""### Dataset Information"""

# Dataset Info
df.info()

"""#### Duplicate Values"""

# Dataset Duplicate Value Count
duplicate_rows = df.loc[df.duplicated()]
duplicate_rows

df.columns

"""#### Missing Values/Null Values"""

# Missing Values/Null Values Count
missing_values= df.isnull()
sum_of_missing_values= missing_values.sum(axis=0)
sum_of_missing_values

df.head(25)

missing_values[missing_values["Rating"]].head(1474)

# visualisation of missing values
# yticklabels = missing_values.values[::-1]
sns.heatmap(missing_values, cmap='gray')
plt.show()

df.iloc[23]

df = df.dropna(subset=['Content Rating','Current Ver','Android Ver','Type'])
df

mean_rating = df['Rating'].mean()

# For each row with a missing value in the Rating column, replace the missing value with the mean.
df['Rating'].fillna(mean_rating, inplace=True)

df.head(25)

df = df.drop(columns=['Size','Last Updated','Current Ver'])
df

df.info()

"""### What did you know about your dataset?

## ***2. Understanding Your Variables***
"""

# Dataset Columns
df.columns

# Dataset Describe
df.describe()

# Remove commas and replace '+'
df['Installs'] = df['Installs'].str.replace(',', '').str.replace('+', '')

# Convert the column to integer
df['Installs'] = df['Installs'].astype(int)

# Remove commas and replace '$'
df['Price'] = df['Price'].str.replace(',', '').str.replace('$', '')

# Convert the column to integer
df['Price'] = df['Price'].astype(float)

df['Installs']

# Dataset Describe
# Write your code to make your dataset analysis ready.
df['Reviews'] = pd.to_numeric(df['Reviews'], errors='coerce')
df['Installs'] = pd.to_numeric(df['Installs'], errors='coerce')
df['Price']= pd.to_numeric(df['Price'], errors='coerce')

# Dataset Describe
df.info()

df.describe()

#df.corr()

"""### Variables Description

The dataset contains app details from the Play Store, including 'App' names, 'Category' classifications, and user-related metrics such as 'Rating,' 'Reviews,' and 'Installs.' Additionally, it includes 'Price' and 'Content Rating' information. Data preprocessing involved converting numerical columns to the appropriate format and handling missing values. These variables collectively offer insights into user engagement, pricing, and content appropriateness in the Play Store app ecosystem.

### Check Unique Values for each variable.
"""

# Check Unique Values for each variable
df.nunique()

"""## 3. ***Data Wrangling***

### Data Wrangling Code
"""

df= df.value_counts()



df= pd.DataFrame(df)
df

df = df.iloc[:, :-1]

# df = df.rename(columns=df.iloc[0])
# df = df.drop(df.index[0])

df.to_csv("updated play store.csv")

df2= pd.read_csv('updated play store.csv')
df2

#columns counts
df2.columns

df2.info()

df2.describe()

df2['Price'].dtype

df2

"""### What all manipulations have you done and insights you found?

In the data manipulations, missing values were addressed by identifying and subsequently removing rows with null entries in specific columns. Unnecessary columns were dropped to streamline the dataset, and relevant columns were converted to numeric types. Regarding insights, the analysis revealed a predominant distribution of high ratings, with many apps boasting around 5 stars. Further exploration into categories identified 'Entertainment' and 'Education' as popular choices. Correlation analysis indicated a positive relationship between the number of reviews/installs and app ratings, offering valuable insights for developers seeking to enhance app success.

## ***4. Data Vizualization, Storytelling & Experimenting with charts : Understand the relationships between variables***

#### Chart - 1
"""

# Chart - 1 visualization code
#histogram
plt.hist(df2['Rating'], bins=20, color='blue', edgecolor='black')
plt.title('Distribution of Ratings')
plt.xlabel('Rating')
plt.ylabel('Frequency')
plt.show()

"""##### 1. Why did you pick the specific chart?

Histogram is used to visualize the distribution of ratings. This helps us understand the range of ratings and how many apps have each rating.

##### 2. What is/are the insight(s) found from the chart?

Answer: From the histogram, we can see that the majority of apps have a rating of 5 stars, with a significant number of apps also having a rating of 4 stars. This suggests that users are generally satisfied with the apps in the Play Store.

##### 3. Will the gained insights help creating a positive business impact?
Are there any insights that lead to negative growth? Justify with specific reason.

Answer: The insights gained from the histogram chart can help developers understand the rating distribution of their own apps and make adjustments to improve their ratings. For example, if an app has a low rating, developers can look at the reviews to see what users are complaining about and make changes to address those issues. This can help to improve the overall rating of the app and attract more users.

#### Chart - 2
"""

# Chart - 2 visualization code
#boxplot for Ratings
sns.boxplot(x=df2['Rating'])
plt.title('Box Plot of Ratings')
plt.show()

"""##### 1. Why did you pick the specific chart?

Answer:  A boxplot is a useful tool for visualizing the distribution of data, especially when there are outliers. In this case, we can use a boxplot to see the range of ratings and the distribution of ratings around the median.

##### 2. What is/are the insight(s) found from the chart?

Answer: From the boxplot, we can see that the median rating is 4.5 stars, with a range of ratings from 1 star to 5 stars. There are a few outliers with ratings of 1 star and 5 stars, but the majority of apps fall within the range of 3 stars to 5 stars.

##### 3. Will the gained insights help creating a positive business impact?
Are there any insights that lead to negative growth? Justify with specific reason.

Answer: The insights gained from the boxplot chart can help developers understand the distribution of ratings of their own apps and make adjustments to improve their ratings. For example, if an app has a low median rating, developers can look at the reviews to see what users are complaining about and make changes to address those issues. This can help to improve the overall rating of the app and attract more users.
"""

def format_func(value, tick_pos):
  return '{:,.0f}'.format(value)

"""#### Chart - 3"""

# Chart - 3 visualization code
#boxplot for Reviews
sns.boxplot(x=df2['Reviews'])
plt.title('Box Plot of Reviews')
plt.gca().yaxis.set_major_formatter(FuncFormatter(format_func))
plt.show()

"""##### 1. Why did you pick the specific chart?

Answer: A boxplot is a useful tool for visualizing the distribution of data, especially when there are outliers. In this case, we can use a boxplot to see the range of reviews and the distribution of reviews around the median.

##### 2. What is/are the insight(s) found from the chart?

Answer: From the boxplot, we can see that the median number of reviews is 4,513, with a range of reviews from 0 to 14,000,000. There are a few outliers with a very large number of reviews, but the majority of apps fall within the range of 0 to 10,000 reviews.

##### 3. Will the gained insights help creating a positive business impact?
Are there any insights that lead to negative growth? Justify with specific reason.

Answer: The insights gained from the boxplot chart can help developers understand the distribution of reviews of their own apps and make adjustments to improve their reviews. For example, if an app has a low median number of reviews, developers can look at the reviews to see what users are saying about the app and make changes to address those issues. This can help to improve the overall rating of the app and attract more users.

#### Chart - 4
"""

# Chart - 4 visualization code
#Boxplot gpr Installs
sns.boxplot(x=df2['Installs'])
plt.title('Box Plot of Installs')
plt.show()

"""##### 1. Why did you pick the specific chart?

Answer: A boxplot is a useful tool for visualizing the distribution of data, especially when there are outliers. In this case, we can use a boxplot to see the range of installs and the distribution of installs around the median.

##### 2. What is/are the insight(s) found from the chart?

Answer: From the boxplot, we can see that the median number of installs is 10,000, with a range of installs from 0 to 100,000,000. There are a few outliers with a very large number of installs, but the majority of apps fall within the range of 0 to 1,000,000 installs.

##### 3. Will the gained insights help creating a positive business impact?
Are there any insights that lead to negative growth? Justify with specific reason.

Answer: The insights gained from the boxplot chart can help developers understand the distribution of installs of their own apps and make adjustments to improve their installs. For example, if an app has a low median number of installs, developers can look at the reviews to see what users are saying about the app and make changes to address those issues. This can help to improve the overall rating of the app and attract more users.

#### Chart - 5
"""

# Chart - 5 visualization code
# Horizontal bar chart for 'Category'
plt.figure(figsize=(12, 8))
sns.countplot(y='Category', data=df2, order=df2['Category'].value_counts().index)
plt.title('Count of Apps in Each Category')
plt.xlabel('Count')
plt.ylabel('Category')
plt.gca().xaxis.set_major_formatter(FuncFormatter(format_func))
plt.show()

"""##### 1. Why did you pick the specific chart?

Answer: A horizontal bar chart is a useful tool for visualizing the distribution of categorical data. In this case, we can use a horizontal bar chart to see the number of apps in each category.

##### 2. What is/are the insight(s) found from the chart?

Answer: From the horizontal bar chart, we can see that the most popular category is 'Entertainment', with over 10,000 apps. The second most popular category is 'Education', with over 8,000 apps. The third most popular category is 'Social', with over 7,000 apps.

##### 3. Will the gained insights help creating a positive business impact?
Are there any insights that lead to negative growth? Justify with specific reason.

Answer: The insights gained from the horizontal bar chart can help developers understand the most popular categories of apps. This information can be used to develop new apps in popular categories or to improve existing apps in popular categories. This can help to attract more users and increase revenue.

#### Chart - 6
"""

#valuecount for Content Rating
content_rating_counts = df2['Content Rating'].value_counts()
content_rating_counts

# Chart - 6 visualization code
plt.figure(figsize=(8, 8))
df2['Content Rating'].value_counts().plot.pie(autopct='%1.1f%%', startangle=180,ylabel='')
plt.title('Distribution of Content Ratings')
plt.legend(content_rating_counts.index, loc='center left', bbox_to_anchor=(1, 0.5))
plt.show()

"""##### 1. Why did you pick the specific chart?

Answer: A pie chart is a useful tool for visualizing the distribution of categorical data. In this case, we can use a pie chart to see the percentage of apps in each content rating category.

##### 2. What is/are the insight(s) found from the chart?

Answer: From the pie chart, we can see that the most popular content rating category is 'Everyone', with over 90% of apps. The second most popular category is 'Teen', with over 5% of apps. The third most popular category is 'Mature', with over 2% of apps.

##### 3. Will the gained insights help creating a positive business impact?
Are there any insights that lead to negative growth? Justify with specific reason.

Answer: The insights gained from the pie chart can help developers understand the most popular content rating categories. This information can be used to develop new apps in popular content rating categories or to improve existing apps in popular content rating categories. This can help to attract more users and increase revenue.

#### Chart - 7
"""

# Chart - 7 visualization code
#Bar plot
from matplotlib.ticker import FuncFormatter
plt.figure(figsize=(16, 8))
# Use the formatter for the y-axis
sns.barplot(x='Category', y='Installs',estimator=sum,data=df2, ci=None)
plt.xticks(rotation=90)
plt.title('Total Installations by Category')
plt.ylim(2000, 35000000000)

# Apply the custom formatter to the y-axis
plt.gca().yaxis.set_major_formatter(FuncFormatter(format_func))

plt.show()

"""##### 1. Why did you pick the specific chart?

Answer: A bar chart is a useful tool for visualizing the distribution of numerical data. In this case, we can use a bar chart to see the total number of installs by category.

##### 2. What is/are the insight(s) found from the chart?

Answer: From the bar chart, we can see that the most popular category by installs is 'Entertainment', with over 300 billion installs. The second most popular category is 'Social', with over 200 billion installs. The third most popular category is 'Education', with over 100 billion installs.

##### 3. Will the gained insights help creating a positive business impact?
Are there any insights that lead to negative growth? Justify with specific reason.

Answer: The insights gained from the bar chart can help developers understand the most popular categories of apps by installs. This information can be used to develop new apps in popular categories or to improve existing apps in popular categories. This can help to attract more users and increase revenue.

#### Chart - 8
"""

# Chart - 8 visualization code
#scatterplot
# Scatter plot of 'Reviews' vs 'Rating'
plt.scatter(df2['Reviews'], df2['Rating'])
plt.title('Scatter Plot of Reviews vs Rating')
plt.xlabel('Reviews')
plt.ylabel('Rating')
plt.show()

# Scatter plot of 'Installs' vs 'Rating'
plt.scatter(df2['Installs'], df2['Rating'])
plt.title('Scatter Plot of Installs vs Rating')
plt.xlabel('Installs')
plt.ylabel('Rating')
plt.show()

# Scatter plot of 'Reviews' vs 'Installs'
plt.scatter(df2['Reviews'], df2['Installs'])
plt.title('Scatter Plot of Reviews vs Installs')
plt.xlabel('Reviews')
plt.ylabel('Installs')
plt.show()

# plt.scatter(df2['Price'], df2['Installs'])
# plt.title('Scatter Plot of Price vs Installs')
# plt.xlabel('Price')
# plt.ylabel('Installs')
# plt.xticks(rotation=90)
# plt.show()

plt.scatter(df2['Price'], df2['Installs'])
plt.title('Scatter Plot of Price vs Installs')
plt.xlabel('Price')
plt.ylabel('Installs')
plt.xticks(rotation=90)
plt.show()

"""##### 1. Why did you pick the specific chart?

Answer: A scatter plot is a useful tool for visualizing the relationship between two numerical variables. In this case, we can use a scatter plot to see how the number of reviews an app has is related to its rating.

##### 2. What is/are the insight(s) found from the chart?

Answer: From the scatter plot, we can see that there is a positive relationship between the number of reviews an app has and its rating. This means that apps with more reviews tend to have higher ratings.

##### 3. Will the gained insights help creating a positive business impact?
Are there any insights that lead to negative growth? Justify with specific reason.

Answer: The insights gained from the scatter plot can help developers understand the relationship between the number of reviews an app has and its rating. This information can be used to make decisions about how to promote their apps and improve their ratings. For example, developers may decide to focus on getting more reviews for their apps, or they may decide to improve the quality of their apps in order to get higher ratings.

#### Chart - 9
"""

# Chart - 9 visualization code
# line plot
plt.plot(df2['Installs'])
plt.title('Line Plot of Installs')
plt.xlabel('Index')
plt.ylabel('Installs')
plt.show()

"""1. Why did you pick the specific chart?

Answer: A line plot is a useful tool for visualizing the trend of a numerical variable over time. In this case, we can use a line plot to see how the number of installs for each app has changed over time.

##### 2. What is/are the insight(s) found from the chart?

Answer: From the line plot, we can see that the number of installs for most apps has increased over time. This indicates that there is a growing demand for mobile apps.

##### 3. Will the gained insights help creating a positive business impact?
Are there any insights that lead to negative growth? Justify with specific reason.

Answer: The insights gained from the line plot can help developers understand how the demand for their apps is changing over time. This information can be used to make decisions about how to market their apps and improve their performance. For example, developers may decide to focus on marketing their apps to new audiences, or they may decide to improve the quality of their apps in order to attract more users.

#### Chart - 10
"""

# Chart - 10 visualization code
df2.groupby(['Category', 'Content Rating']).size().unstack().plot(kind='bar')
plt.show()

"""##### 1. Why did you pick the specific chart?

Answer: A bar chart is a useful tool for visualizing the distribution of categorical data. In this case, we can use a bar chart to see the number of apps in each category and content rating combination.

##### 2. What is/are the insight(s) found from the chart?

Answer: From the bar chart, we can see that the most popular category is 'Entertainment', with over 100,000 apps. The second most popular category is 'Social', with over 90,000 apps. The third most popular category is 'Education', with over 80,000 apps.

##### 3. Will the gained insights help creating a positive business impact?
Are there any insights that lead to negative growth? Justify with specific reason.

Answer: The insights gained from the bar chart can help developers understand the most popular categories and content ratings of apps. This information can be used to develop new apps in popular categories or to improve existing apps in popular categories. This can help to attract more users and increase revenue.

#### Chart - 11
"""

# Chart - 11 visualization code

correlation_matrix = df2.corr()

plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt='.2f', linewidths=0.5)
plt.title('Correlation Matrix')
plt.show()

"""##### 1. Why did you pick the specific chart?

Answer: A correlation heatmap is a useful tool for visualizing the correlations between multiple variables. In this case, we can use a correlation heatmap to see how the different features of apps are correlated with each other. This information can be used to understand how the different features of apps affect their success.

##### 2. What is/are the insight(s) found from the chart?

Answer: From the correlation heatmap, we can see that there are a number of strong correlations between the different features of apps. For example, there is a strong positive correlation between the number of reviews an app has and its rating. This means that apps with more reviews tend to have higher ratings. There is also a strong positive correlation between the number of downloads an app has and its rating. This means that apps with more downloads tend to have higher ratings.

#### Chart - 15 - Pair Plot
"""

# Pair Plot visualization code
sns.pairplot(df2[['Installs', 'Reviews', 'Price', 'Rating']])
plt.show()

"""##### 1. Why did you pick the specific chart?

Answer: A pair plot is a useful tool for visualizing the relationships between multiple numerical variables. In this case, we can use a pair plot to see how the different numerical features of apps are related to each other. This information can be used to understand how the different features of apps affect their success.

##### 2. What is/are the insight(s) found from the chart?

Answer: From the pair plot, we can see that there are a number of interesting relationships between the different features of apps. For example, we can see that there is a positive relationship between the number of reviews an app has and its rating. This means that apps with more reviews tend to have higher ratings. We can also see that there is a positive relationship between the number of downloads an app has and its rating. This means that apps with more downloads tend to have higher ratings. Finally, we can see that there is a negative relationship between the price of an app and its rating. This means that apps that are more expensive tend to have lower ratings.

## **5. Solution to Business Objective**

#### What do you suggest the client to achieve Business Objective ?
Explain Briefly.

There are a number of things that the client can do to achieve their business objective of increasing the number of downloads for their app.

First, the client should focus on improving the quality of their app. This means making sure that the app is bug-free, easy to use, and has a good user experience. The client can do this by conducting user testing, getting feedback from users, and fixing any bugs that are found.

Second, the client should focus on marketing their app. This means creating a strong marketing plan that includes using social media, email marketing, and paid advertising. The client should also make sure that their app is listed in relevant app stores and that the app's listing is optimized for search engines.

Finally, the client should focus on customer service. This means responding to customer inquiries quickly and resolving any issues that customers may have. The client should also make sure that their app has a strong customer support system in place.

By following these tips, the client can increase the number of downloads for their app and achieve their business objective.

# **Conclusion**

Write the conclusion here.

In conclusion, this report has provided a comprehensive analysis of the data provided by the client. The analysis has revealed a number of insights that can be used to help the client achieve their business objective of increasing the number of downloads for their app.
The client should focus on improving the quality of their app, marketing their app, and providing good customer service. By following these tips, the client can increase the number of downloads for their app and achieve their business objective.

### ***Hurrah! You have successfully completed your EDA Capstone Project !!!***
"""